{"version":3,"sources":["CandyMachine/index.js","CountdownTimer/index.js","assets/twitter-logo.svg","App.js","index.js","CandyMachine/helpers.js"],"names":["programs","metadata","Metadata","MetadataProgram","config","web3","PublicKey","process","REACT_APP_CANDY_MACHINE_CONFIG","SystemProgram","opts","CandyMachine","walletAddress","useState","machineStats","setMachineStats","mints","setMints","isMinting","setIsMinting","isLoadingMints","setIsLoadingMints","useEffect","getCandyMachineState","getProvider","rpcHost","REACT_APP_SOLANA_RPC_HOST","connection","Connection","Provider","window","solana","a","provider","Program","fetchIdl","candyMachineProgram","idl","program","account","candyMachine","fetch","REACT_APP_CANDY_MACHINE_ID","itemsAvailable","data","toNumber","itemsRedeemed","itemsRemaining","goLiveData","goLiveDate","goLiveDateTimeString","Date","toGMTString","console","log","fetchHashTable","length","requests","map","mint","uri","response","json","parse","image","error","Promise","all","allMints","filteredMints","filter","hash","metadataEnabled","getProgramAccounts","filters","memcmp","offset","bytes","metadataAccounts","mintHashes","index","getParsedAccountInfo","pubkey","accountInfo","toString","value","push","getMetadata","findProgramAddress","Buffer","from","TOKEN_METADATA_PROGRAM_ID","toBuffer","getMasterEdition","getTokenWallet","wallet","TOKEN_PROGRAM_ID","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","mintToken","Keypair","generate","publicKey","token","masterEdition","getMinimumBalanceForRentExemption","MintLayout","span","rent","accounts","payer","REACT_APP_TREASURY_ADDRESS","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","programId","SYSVAR_RENT_PUBKEY","clock","SYSVAR_CLOCK_PUBKEY","signers","instructions","createAccount","fromPubkey","newAccountPubkey","space","lamports","Token","createInitMintInstruction","createAssociatedTokenAccountInstruction","createMintToInstruction","rpc","mintNft","txn","onSignatureWithOptions","notification","context","type","result","err","commitment","message","msg","code","indexOf","warn","associatedTokenAddress","splTokenMintAddress","keys","isSigner","isWritable","TransactionInstruction","className","currentDate","dropDate","renderDropTimer","onClick","disabled","src","alt","CountdownTimer","timerString","setTimerString","interval","setInterval","getTime","distance","days","Math","floor","hours","minutes","seconds","clearInterval","TWITTER_HANDLE","TWITTER_LINK","App","setWalletAddress","onLoad","checkIfWalletIsConnected","addEventListener","removeEventListener","isPhantom","connect","onlyIfTrusted","alert","connectWallet","twitterLogo","href","target","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0100b419.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Connection, PublicKey } from '@solana/web3.js';\nimport { Program, Provider, web3 } from '@project-serum/anchor';\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\nimport { programs } from '@metaplex/js';\nimport CountdownTimer from '../CountdownTimer';\nimport './CandyMachine.css';\nimport {\n  candyMachineProgram,\n  TOKEN_METADATA_PROGRAM_ID,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n} from './helpers';\nconst {\n  metadata: { Metadata, MetadataProgram },\n} = programs;\n\nconst config = new web3.PublicKey(process.env.REACT_APP_CANDY_MACHINE_CONFIG);\nconst { SystemProgram } = web3;\nconst opts = {\n  preflightCommitment: 'processed',\n};\n\nconst MAX_NAME_LENGTH = 32;\nconst MAX_URI_LENGTH = 200;\nconst MAX_SYMBOL_LENGTH = 10;\nconst MAX_CREATOR_LEN = 32 + 1 + 1;\n\nconst CandyMachine = ({ walletAddress }) => {\n  const [machineStats, setMachineStats] = useState(null);\n  const [mints, setMints] = useState([]);\n  const [isMinting, setIsMinting] = useState(false);\n  const [isLoadingMints, setIsLoadingMints] = useState(false);\n  useEffect(() => {\n    getCandyMachineState();\n    // eslint-disable-next-line\n  }, []);\n  const getProvider = () => {\n    const rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST;\n    // Create a new connection object\n    const connection = new Connection(rpcHost);\n\n    // Create a new Solana provider object\n    const provider = new Provider(\n      connection,\n      window.solana,\n      opts.preflightCommitment\n    );\n\n    return provider;\n  };\n\n  const renderDropTimer = () => {\n    // Get the current date and dropDate in a JavaScript Date object\n    const currentDate = new Date();\n    const dropDate = new Date(machineStats.goLiveData * 1000);\n\n    // If currentDate is before dropDate, render our Countdown component\n    if (currentDate < dropDate) {\n      console.log('Before drop date!');\n      // Don't forget to pass over your dropDate!\n      return <CountdownTimer dropDate={dropDate} />;\n    }\n\n    // Else let's just return the current drop date\n    return <p>{`Drop Date: ${machineStats.goLiveDateTimeString}`}</p>;\n  };\n\n  const getCandyMachineState = async () => {\n    const provider = getProvider();\n\n    // Get metadata about your deployed candy machine program\n    const idl = await Program.fetchIdl(candyMachineProgram, provider);\n\n    // Create a program that you can call\n    const program = new Program(idl, candyMachineProgram, provider);\n\n    // Fetch the metadata from your candy machine\n    const candyMachine = await program.account.candyMachine.fetch(\n      process.env.REACT_APP_CANDY_MACHINE_ID\n    );\n\n    // Parse out all our metadata and log it out\n    const itemsAvailable = candyMachine.data.itemsAvailable.toNumber();\n    const itemsRedeemed = candyMachine.itemsRedeemed.toNumber();\n    const itemsRemaining = itemsAvailable - itemsRedeemed;\n    const goLiveData = candyMachine.data.goLiveDate.toNumber();\n\n    // We will be using this later in our UI so let's generate this now\n    const goLiveDateTimeString = `${new Date(goLiveData * 1000).toGMTString()}`;\n    setMachineStats({\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      goLiveData,\n      goLiveDateTimeString,\n    });\n\n    console.log({\n      itemsAvailable,\n      itemsRedeemed,\n      itemsRemaining,\n      goLiveData,\n      goLiveDateTimeString,\n    });\n\n    setIsLoadingMints(true);\n    const data = await fetchHashTable(\n      process.env.REACT_APP_CANDY_MACHINE_ID,\n      true\n    );\n\n    if (data.length !== 0) {\n      const requests = data.map(async (mint) => {\n        // Get URI\n        try {\n          const response = await fetch(mint.data.uri);\n          const parse = await response.json();\n          console.log('Past Minted NFT', mint);\n          console.log('Response', parse);\n\n          // Get image URI\n          return parse.image;\n        } catch (e) {\n          // If any request fails, we'll just disregard it and carry on\n          console.error('Failed retrieving Minted NFT', mint);\n          return null;\n        }\n      });\n\n      // Wait for all requests to finish\n      const allMints = await Promise.all(requests);\n\n      // Filter requests that failed\n      const filteredMints = allMints.filter((mint) => mint !== null);\n\n      // Store all the minted image URIs\n      setMints(filteredMints);\n    }\n    setIsLoadingMints(false);\n  };\n\n  const fetchHashTable = async (hash, metadataEnabled) => {\n    const connection = new web3.Connection(\n      process.env.REACT_APP_SOLANA_RPC_HOST\n    );\n\n    const metadataAccounts = await MetadataProgram.getProgramAccounts(\n      connection,\n      {\n        filters: [\n          {\n            memcmp: {\n              offset:\n                1 +\n                32 +\n                32 +\n                4 +\n                MAX_NAME_LENGTH +\n                4 +\n                MAX_URI_LENGTH +\n                4 +\n                MAX_SYMBOL_LENGTH +\n                2 +\n                1 +\n                4 +\n                0 * MAX_CREATOR_LEN,\n              bytes: hash,\n            },\n          },\n        ],\n      }\n    );\n\n    const mintHashes = [];\n\n    for (let index = 0; index < metadataAccounts.length; index++) {\n      const account = metadataAccounts[index];\n      const accountInfo = await connection.getParsedAccountInfo(account.pubkey);\n      const metadata = new Metadata(hash.toString(), accountInfo.value);\n      if (metadataEnabled) mintHashes.push(metadata.data);\n      else mintHashes.push(metadata.data.mint);\n    }\n\n    return mintHashes;\n  };\n\n  const getMetadata = async (mint) => {\n    return (\n      await PublicKey.findProgramAddress(\n        [\n          Buffer.from('metadata'),\n          TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n          mint.toBuffer(),\n        ],\n        TOKEN_METADATA_PROGRAM_ID\n      )\n    )[0];\n  };\n\n  const getMasterEdition = async (mint) => {\n    return (\n      await PublicKey.findProgramAddress(\n        [\n          Buffer.from('metadata'),\n          TOKEN_METADATA_PROGRAM_ID.toBuffer(),\n          mint.toBuffer(),\n          Buffer.from('edition'),\n        ],\n        TOKEN_METADATA_PROGRAM_ID\n      )\n    )[0];\n  };\n\n  const getTokenWallet = async (wallet, mint) => {\n    return (\n      await web3.PublicKey.findProgramAddress(\n        [wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\n        SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\n      )\n    )[0];\n  };\n\n  const mintToken = async () => {\n    try {\n      setIsMinting(true);\n      const mint = web3.Keypair.generate();\n      const token = await getTokenWallet(\n        walletAddress.publicKey,\n        mint.publicKey\n      );\n      const metadata = await getMetadata(mint.publicKey);\n      const masterEdition = await getMasterEdition(mint.publicKey);\n      const rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST;\n      const connection = new Connection(rpcHost);\n      const rent = await connection.getMinimumBalanceForRentExemption(\n        MintLayout.span\n      );\n\n      const accounts = {\n        config,\n        candyMachine: process.env.REACT_APP_CANDY_MACHINE_ID,\n        payer: walletAddress.publicKey,\n        wallet: process.env.REACT_APP_TREASURY_ADDRESS,\n        mint: mint.publicKey,\n        metadata,\n        masterEdition,\n        mintAuthority: walletAddress.publicKey,\n        updateAuthority: walletAddress.publicKey,\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\n        tokenProgram: TOKEN_PROGRAM_ID,\n        systemProgram: SystemProgram.programId,\n        rent: web3.SYSVAR_RENT_PUBKEY,\n        clock: web3.SYSVAR_CLOCK_PUBKEY,\n      };\n\n      const signers = [mint];\n      const instructions = [\n        web3.SystemProgram.createAccount({\n          fromPubkey: walletAddress.publicKey,\n          newAccountPubkey: mint.publicKey,\n          space: MintLayout.span,\n          lamports: rent,\n          programId: TOKEN_PROGRAM_ID,\n        }),\n        Token.createInitMintInstruction(\n          TOKEN_PROGRAM_ID,\n          mint.publicKey,\n          0,\n          walletAddress.publicKey,\n          walletAddress.publicKey\n        ),\n        createAssociatedTokenAccountInstruction(\n          token,\n          walletAddress.publicKey,\n          walletAddress.publicKey,\n          mint.publicKey\n        ),\n        Token.createMintToInstruction(\n          TOKEN_PROGRAM_ID,\n          mint.publicKey,\n          token,\n          walletAddress.publicKey,\n          [],\n          1\n        ),\n      ];\n\n      const provider = getProvider();\n      const idl = await Program.fetchIdl(candyMachineProgram, provider);\n      const program = new Program(idl, candyMachineProgram, provider);\n\n      const txn = await program.rpc.mintNft({\n        accounts,\n        signers,\n        instructions,\n      });\n\n      console.log('txn:', txn);\n\n      // Setup listener\n      connection.onSignatureWithOptions(\n        txn,\n        async (notification, context) => {\n          if (notification.type === 'status') {\n            console.log('Receievd status event');\n\n            const { result } = notification;\n            if (!result.err) {\n              console.log('NFT Minted!');\n              setIsMinting(false);\n              await getCandyMachineState();\n            }\n          }\n        },\n        { commitment: 'processed' }\n      );\n    } catch (error) {\n      console.error(error);\n      let message = error.msg || 'Minting failed! Please try again!';\n\n      setIsMinting(false);\n      if (!error.msg) {\n        if (error.message.indexOf('0x138')) {\n        } else if (error.message.indexOf('0x137')) {\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf('0x135')) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          message = `SOLD OUT!`;\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      console.warn(message);\n    }\n  };\n\n  const createAssociatedTokenAccountInstruction = (\n    associatedTokenAddress,\n    payer,\n    walletAddress,\n    splTokenMintAddress\n  ) => {\n    const keys = [\n      { pubkey: payer, isSigner: true, isWritable: true },\n      { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n      { pubkey: walletAddress, isSigner: false, isWritable: false },\n      { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\n      {\n        pubkey: web3.SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      {\n        pubkey: web3.SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n    return new web3.TransactionInstruction({\n      keys,\n      programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n      data: Buffer.from([]),\n    });\n  };\n\n  const renderMintedItems = () => (\n    <div className=\"gif-container\">\n      <p className=\"sub-text\">Minted Items ✨</p>\n      <div className=\"gif-grid\">\n        {mints.map((mint) => (\n          <div className=\"gif-item\" key={mint}>\n            <img src={mint} alt={`Minted NFT ${mint}`} />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n\n  return (\n    machineStats && (\n      <div className=\"machine-container\">\n        {renderDropTimer()}\n        <p>{`Items Minted: ${machineStats.itemsRedeemed} / ${machineStats.itemsAvailable}`}</p>\n        {machineStats.itemsRedeemed === machineStats.itemsAvailable ? (\n          <p className=\"sub-text\">Sold Out 🙊</p>\n        ) : (\n          <button\n            className=\"cta-button mint-button\"\n            onClick={mintToken}\n            disabled={isMinting}\n          >\n            Mint NFT\n          </button>\n        )}\n        {isLoadingMints && <p>LOADING MINTS...</p>}\n        {mints.length > 0 && renderMintedItems()}\n      </div>\n    )\n  );\n};\n\nexport default CandyMachine;\n","import React, { useEffect, useState } from 'react';\nimport './CountdownTimer.css';\n\nconst CountdownTimer = ({ dropDate }) => {\n  const [timerString, setTimerString] = useState('');\n  useEffect(() => {\n    console.log('Setting interval...');\n\n    const interval = setInterval(() => {\n      const currentDate = new Date().getTime();\n      const distance = dropDate - currentDate;\n\n      const days = Math.floor(distance / (1000 * 60 * 60 * 24));\n      const hours = Math.floor(\n        (distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\n      );\n      const minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n      const seconds = Math.floor((distance % (1000 * 60)) / 1000);\n\n      setTimerString(`${days}d ${hours}h ${minutes}m ${seconds}s`);\n\n      if (distance < 0) {\n        console.log('Clearing interval...');\n        clearInterval(interval);\n      }\n    }, 1000);\n\n    return () => {\n      if (interval) {\n        clearInterval(interval);\n      }\n    };\n    // eslint-disable-next-line\n  }, []);\n  \n\n  return (\n    <div className=\"timer-container\">\n      <p className=\"timer-header\">Candy Drop Starting In</p>\n      {timerString && <p className=\"timer-value\">{`⏰ ${timerString}`}</p>}\n    </div>\n  );\n};\n\nexport default CountdownTimer;\n","export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","import './App.css';\nimport { useEffect, useState } from 'react';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport CandyMachine from './CandyMachine';\n\n// Constants\nconst TWITTER_HANDLE = 'ColdoneDrew';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\n\nfunction App() {\n  const [walletAddress, setWalletAddress] = useState('');\n  useEffect(() => {\n    console.log(process.env.REACT_APP_CANDY_MACHINE_ID);\n    const onLoad = async () => {\n      await checkIfWalletIsConnected();\n    };\n    window.addEventListener('load', onLoad);\n    return () => window.removeEventListener('load', onLoad);\n  }, []);\n\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana) {\n        if (solana.isPhantom) {\n          console.log('Phantom wallet found!');\n          const response = await solana.connect({ onlyIfTrusted: true });\n          setWalletAddress(response.publicKey.toString());\n        }\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  const connectWallet = async () => {\n    const { solana } = window;\n    if (solana) {\n      if (solana.isPhantom) {\n        const response = await solana.connect();\n        setWalletAddress(response.publicKey.toString());\n      }\n    }\n  };\n\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header\">NFT Candies</p>\n          <p className=\"sub-text\">Gather your NFT broccoli</p>\n          {!walletAddress && renderNotConnectedContainer()}\n        </div>\n        {walletAddress && <CandyMachine walletAddress={window.solana} />}\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built by @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","import { web3 } from '@project-serum/anchor';\n\n// CLI Properties Given to us\nconst candyMachineProgram = new web3.PublicKey(\n  'cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ'\n);\n\nconst TOKEN_METADATA_PROGRAM_ID = new web3.PublicKey(\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'\n);\n\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new web3.PublicKey(\n  'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'\n);\nexport {\n  candyMachineProgram,\n  TOKEN_METADATA_PROGRAM_ID,\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\n};\n"],"sourceRoot":""}